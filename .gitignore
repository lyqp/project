# github 视频的笔记

# 设置用户名和邮箱
# git config --global user.name "你的名字" 
# git config --global user.email "你的邮箱"
# 这个文件可以在C:/Users/用户名文件夹/.gitconfig中通过记事本或者什么打开方式来查看

# 查看所有的全局配置项
# git config --list --global
# 查看指定的全局配置项
# git config user.name
# git config user.email

# 要想打开git config 命令的帮助手册
# git help config

# 想要获取 git config 命令的快速参考 （即不想看完整的快速参考） 用-h获取更简明的help输出
# git config -h

# 初始化仓库
# git init 然后就建立一个名为.git的隐藏目录，这个.git目录就是当前的git仓库

# 工作区的四个状态：未跟踪（Untracked） 未修改（Unmodified） 已修改（Modified） 已暂存（Staged）

# 使用 git status 命令来查看文件处于什么状态
# 使用 git status -s 则可以以精简的方式显示文件的状态

# 使用 git add 来开始跟踪一个文件。add后面文件名
# 使用 git add .来开始跟踪全部文件。

# 使用 git commit -m "提交的消息" 来提交文件到远程仓库

# 使用 git checkout -- 文件名 来撤销对对应的文件

# 使用 git reset HEAD 要移除的文件名称

# git标准的工作流程是：工作区->暂存区->git仓库 所以我们可以使用如下代码：
# git commit -a -m "描述消息" 这时候git工作的流程简化为了工作区->git仓库

# 从 git仓库和工作区中同时移除index.js文件
# git rm -f index.js

# 只从Git仓库中移除index.css ，但保留工作区中的index.css文件
# git rm --cached index.css

# 忽略index.css这个文件
index.css

# 忽略test目录下的所有的文件
test/

# 忽略所有的.a 文件
# *.a

# 但跟踪所有的lib.a，即使你在前面忽略了.a文件
# !lib.a

# 只忽略当前目录的TODO文件 ，而不忽略doc/server/arch.txt,即（doc下server中的txt文件）
# doc/*.txt

# 忽略doc/目录及其所有子目录下的.pdf文件
# doc/**/*.pdf                                                                            
